(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{"./src/docs/datepicker.mdx":function(e,n,a){"use strict";a.r(n),a.d(n,"default",(function(){return b}));var t,r=a("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js"),o=a("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js"),s=a("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),i=a("./node_modules/react/index.js"),c=a("./node_modules/@mdx-js/react/dist/esm.js"),p=a("./node_modules/docz/dist/index.esm.js"),l=a("./src/css/base.css"),u=a.n(l),d=a("./src/index.js"),m=["components"],y=(t="Arrow",{});function b(e){var n=e.components,a=Object(s.a)(e,m);return Object(c.b)("wrapper",Object.assign({},y,a,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"datepicker"},"DatePicker"),Object(c.b)("h2",{id:"datepicker-props"},"DatePicker props"),Object(c.b)(p.d,{of:d.k,mdxType:"Props"}),Object(c.b)("h2",{id:"usage"},"Usage"),Object(c.b)("h3",{id:"basic-date-picker"},"basic date picker"),Object(c.b)(p.c,{__position:1,__code:"{() => {\n    const [value, setValue] = useState({ year: 2019, month: 11, day: 15 })\n    const onChange = (year, month, day) => {\n      if (!!year && !!month && !!day) {\n        setValue({ year, month, day })\n      }\n    }\n    // provide `day` value for  min, max properties in years object to limit selection by day!\n    const years = {\n      min: { year: 2018, month: 1, day: 25 },\n      max: { year: 2020, month: 2, day: 4 },\n    }\n    return (\n      <Fragment>\n        <DatePicker\n          years={years}\n          value={value}\n          lang={[\n            'Jan',\n            'Feb',\n            'Mar',\n            'Apr',\n            'May',\n            'Jun',\n            'Jul',\n            'Aug',\n            'Sep',\n            'Oct',\n            'Nov',\n            'Dec',\n          ]}\n          onChange={onChange}\n        />\n      \n    )\n  }}\n</Playground>",__scope:{props:this?this.props:a,useState:i.useState,Fragment:i.Fragment,Playground:p.c,Props:p.d,styles:u.a,DatePicker:d.k},__codesandbox:"undefined",mdxType:"Playground"},(function(){var e=Object(i.useState)({year:2019,month:11,day:15}),n=Object(o.a)(e,2),a=n[0],t=n[1];return Object(c.b)(i.Fragment,{mdxType:"Fragment"},Object(c.b)(d.k,{years:{min:{year:2018,month:1,day:25},max:{year:2020,month:2,day:4}},value:a,lang:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],onChange:function(e,n,a){e&&n&&a&&t({year:e,month:n,day:a})},mdxType:"DatePicker"}))})),Object(c.b)("h3",{id:"using-a-custom-picker"},"using a custom picker"),Object(c.b)("p",null,"You can specify a ",Object(c.b)("strong",{parentName:"p"},"custom picker component"),". If you go for this approach, don't forget to manually set the ",Object(c.b)("inlineCode",{parentName:"p"},"isOpen")," prop to ",Object(c.b)("inlineCode",{parentName:"p"},"true")," in order to effectively show your picker"),Object(c.b)(p.c,{__position:2,__code:"{() => {\n    const Arrow = ({ isOpen }) => {\n      return (\n        <div\n          className={\n            isOpen\n              ? styles.exampledDatepickerArrowOpen\n              : styles.exampledDatepickerArrow\n          }\n        />\n      )\n    }\n\n    const [value, setValue] = useState(null)\n    // Manual control of  DatePicker's show prop\n    const [isOpen, setIsOpen] = useState(false)\n    const onChange = (year, month, day) => {\n      if (!!year && !!month && !!day) {\n        setValue({ year, month, day })\n      }\n      setIsOpen(false)\n    }\n    const togglePicker = () => {\n      setIsOpen(!isOpen)\n    }\n\n    // specify min, max properties in years object to limit selection\n    const years = {\n      min: { year: 2018, month: 1 },\n      max: { year: 2020, month: 2 },\n    }\n    return (\n      <Fragment>\n        <DatePicker\n          years={years}\n          value={value}\n          show={isOpen}\n          onChange={onChange}\n        >\n          {/* Custom picker component*/}\n          <span\n            className={styles.exampledDatepickerValueWrapper}\n            onClick={togglePicker}\n          >\n            {value && `day ${value.day}, ${value.month} of ${value.year}`}\n            {!value && 'Customized Date Picker'}\n            <Arrow isOpen={isOpen} />\n          \n          {/**/}\n        </DatePicker>\n      </Fragment>\n    )\n  }}\n</Playground>",__scope:{props:this?this.props:a,useState:i.useState,Fragment:i.Fragment,Playground:p.c,Props:p.d,styles:u.a,DatePicker:d.k},__codesandbox:"undefined",mdxType:"Playground"},(function(){var e=Object(i.useState)(null),n=Object(o.a)(e,2),a=n[0],t=n[1],r=Object(i.useState)(!1),s=Object(o.a)(r,2),p=s[0],l=s[1];return Object(c.b)(i.Fragment,{mdxType:"Fragment"},Object(c.b)(d.k,{years:{min:{year:2018,month:1},max:{year:2020,month:2}},value:a,show:p,onChange:function(e,n,a){e&&n&&a&&t({year:e,month:n,day:a}),l(!1)},mdxType:"DatePicker"},Object(c.b)("span",{className:u.a.exampledDatepickerValueWrapper,onClick:function(){l(!p)}},a&&"day ".concat(a.day,", ").concat(a.month," of ").concat(a.year),!a&&"Customized Date Picker",Object(c.b)((function(e){var n=e.isOpen;return Object(c.b)("div",{className:n?u.a.exampledDatepickerArrowOpen:u.a.exampledDatepickerArrow})}),{isOpen:p,mdxType:"Arrow"}))))})),Object(c.b)("h3",{id:"month-picker"},"month picker"),Object(c.b)("p",null,"You can also display ",Object(c.b)("strong",{parentName:"p"},"month options")," instead of the default ",Object(c.b)("inlineCode",{parentName:"p"},"days")," view."),Object(c.b)("p",null,"Obs: the ",Object(c.b)("inlineCode",{parentName:"p"},"onChange")," function will not return the ",Object(c.b)("inlineCode",{parentName:"p"},"day")," value, obviously because it is not supposed to be shown. Instead, only ",Object(c.b)("inlineCode",{parentName:"p"},"year")," and ",Object(c.b)("inlineCode",{parentName:"p"},"month")," options are passed as parameters"),Object(c.b)(p.c,{__position:3,__code:"{() => {\n    const [value, setValue] = useState(null)\n    const onChange = (year, month) => {\n      if (!!year && !!month) {\n        setValue({ year, month })\n      }\n    }\n    // specify min, max properties in years object to limit selection\n    const years = {\n      min: { year: 2018, month: 1 },\n      max: { year: 2020, month: 2 },\n    }\n    return (\n      <Fragment>\n        <DatePicker\n          years={years}\n          value={value}\n          // enable isMonthsMode prop\n          isMonthsMode={true}\n          onChange={onChange}\n        />\n      \n    )\n  }}\n</Playground>",__scope:{props:this?this.props:a,useState:i.useState,Fragment:i.Fragment,Playground:p.c,Props:p.d,styles:u.a,DatePicker:d.k},__codesandbox:"undefined",mdxType:"Playground"},(function(){var e=Object(i.useState)(null),n=Object(o.a)(e,2),a=n[0],t=n[1];return Object(c.b)(i.Fragment,{mdxType:"Fragment"},Object(c.b)(d.k,{years:{min:{year:2018,month:1},max:{year:2020,month:2}},value:a,isMonthsMode:!0,onChange:function(e,n){e&&n&&t({year:e,month:n})},mdxType:"DatePicker"}))})),Object(c.b)("h3",{id:"month-picker-with-range-option"},"month picker with range option"),Object(c.b)("p",null,"To use the range option, just enable the ",Object(c.b)("inlineCode",{parentName:"p"},"isRange")," prop. In this case, ",Object(c.b)("inlineCode",{parentName:"p"},"value")," is treated as an array, where the first element is the initial range value, and the second is the last range value."),Object(c.b)(p.c,{__position:4,__code:"{() => {\n    const initialValues = [\n      { year: 2019, month: 3 },\n      { year: 2020, month: 2 },\n    ]\n    const [values, setValues] = useState(initialValues)\n    const onChange = (year, month, idx) => {\n      if (!!year && !!month) {\n        const newValues = values ? [...values] : []\n        newValues[idx] = { year, month }\n        setValues(newValues)\n      }\n    }\n    // specify min, max properties in years object to limit selection\n    return (\n      <Fragment>\n        <DatePicker\n          value={values}\n          isMonthsMode={true}\n          // enable isRange prop\n          isRange={true}\n          onChange={onChange}\n        />\n      \n    )\n  }}\n</Playground>",__scope:{props:this?this.props:a,useState:i.useState,Fragment:i.Fragment,Playground:p.c,Props:p.d,styles:u.a,DatePicker:d.k},__codesandbox:"undefined",mdxType:"Playground"},(function(){var e=Object(i.useState)([{year:2019,month:3},{year:2020,month:2}]),n=Object(o.a)(e,2),a=n[0],t=n[1];return Object(c.b)(i.Fragment,{mdxType:"Fragment"},Object(c.b)(d.k,{value:a,isMonthsMode:!0,isRange:!0,onChange:function(e,n,o){if(e&&n){var s=a?Object(r.a)(a):[];s[o]={year:e,month:n},t(s)}},mdxType:"DatePicker"}))})),Object(c.b)("h3",{id:"date-picker-with-range-option"},"date picker with range option"),Object(c.b)(p.c,{__position:5,__code:"{() => {\n    const initialValues = null\n    const [values, setValues] = useState(initialValues)\n    const onChange = (year, month, day, idx) => {\n      if (!!year && !!month && !!day) {\n        const newValues = values ? [...values] : []\n        newValues[idx] = { year, month, day }\n        setValues(newValues)\n      }\n    }\n    // specify min, max properties in years object to limit selection\n    return (\n      <Fragment>\n        <DatePicker\n          years={{\n            min: { day: 1, month: 2, year: 2020 },\n            max: { day: 1, month: 3, year: 2021 },\n          }}\n          value={values}\n          // enable isRange prop\n          isRange={true}\n          onChange={onChange}\n        />\n      \n    )\n  }}\n</Playground>",__scope:{props:this?this.props:a,useState:i.useState,Fragment:i.Fragment,Playground:p.c,Props:p.d,styles:u.a,DatePicker:d.k},__codesandbox:"undefined",mdxType:"Playground"},(function(){var e=Object(i.useState)(null),n=Object(o.a)(e,2),a=n[0],t=n[1];return Object(c.b)(i.Fragment,{mdxType:"Fragment"},Object(c.b)(d.k,{years:{min:{day:1,month:2,year:2020},max:{day:1,month:3,year:2021}},value:a,isRange:!0,onChange:function(e,n,o,s){if(e&&n&&o){var i=a?Object(r.a)(a):[];i[s]={year:e,month:n,day:o},t(i)}},mdxType:"DatePicker"}))})),Object(c.b)("h3",{id:"years-as-array"},"years as array"),Object(c.b)(p.c,{__position:6,__code:"{() => {\n    const Arrow = ({ isOpen }) => {\n      return (\n        <div\n          className={\n            isOpen\n              ? styles.exampledDatepickerArrowOpen\n              : styles.exampledDatepickerArrow\n          }\n        />\n      )\n    }\n\n    const [value, setValue] = useState(null)\n    const [isOpen, setIsOpen] = useState(false)\n    const onChange = (year, month, day) => {\n      if (!!year && !!month && !!day) {\n        setValue({ year, month, day })\n      }\n      setIsOpen(false)\n    }\n    const togglePicker = () => {\n      setIsOpen(!isOpen)\n    }\n\n    return (\n      <Fragment>\n        <DatePicker\n          years={[2015, 2017, 2019]}\n          value={value}\n          show={isOpen}\n          onChange={onChange}\n        >\n          <span\n            className={styles.exampledDatepickerValueWrapper}\n            onClick={togglePicker}\n          >\n            {value && `${value.day}/${value.month}/${value.year}`}\n            {!value && 'Pick a date'}\n            <Arrow isOpen={isOpen} />\n          \n        </DatePicker>\n      </Fragment>\n    )\n  }}\n</Playground>",__scope:{props:this?this.props:a,useState:i.useState,Fragment:i.Fragment,Playground:p.c,Props:p.d,styles:u.a,DatePicker:d.k},__codesandbox:"undefined",mdxType:"Playground"},(function(){var e=Object(i.useState)(null),n=Object(o.a)(e,2),a=n[0],t=n[1],r=Object(i.useState)(!1),s=Object(o.a)(r,2),p=s[0],l=s[1];return Object(c.b)(i.Fragment,{mdxType:"Fragment"},Object(c.b)(d.k,{years:[2015,2017,2019],value:a,show:p,onChange:function(e,n,a){e&&n&&a&&t({year:e,month:n,day:a}),l(!1)},mdxType:"DatePicker"},Object(c.b)("span",{className:u.a.exampledDatepickerValueWrapper,onClick:function(){l(!p)}},a&&"".concat(a.day,"/").concat(a.month,"/").concat(a.year),!a&&"Pick a date",Object(c.b)((function(e){var n=e.isOpen;return Object(c.b)("div",{className:n?u.a.exampledDatepickerArrowOpen:u.a.exampledDatepickerArrow})}),{isOpen:p,mdxType:"Arrow"}))))})))}b&&b===Object(b)&&Object.isExtensible(b)&&Object.defineProperty(b,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"src/docs/datepicker.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=docs-datepicker.05da19b68a4a670388f9.js.map