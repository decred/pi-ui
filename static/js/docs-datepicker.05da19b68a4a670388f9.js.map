{"version":3,"sources":["/home/runner/work/pi-ui/pi-ui/src/docs/datepicker.mdx"],"names":["name","layoutProps","MDXContent","components","props","mdxType","of","DatePicker","__position","__code","__scope","this","useState","Fragment","Playground","Props","styles","__codesandbox","year","month","day","value","setValue","years","min","max","lang","onChange","parentName","isOpen","setIsOpen","show","className","exampledDatepickerValueWrapper","onClick","exampledDatepickerArrowOpen","exampledDatepickerArrow","isMonthsMode","values","setValues","isRange","idx","newValues","isMDXComponent"],"mappings":"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","file":"static/js/docs-datepicker.40a23f45.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { useState, Fragment } from \"react\";\nimport { Playground, Props } from \"docz\";\nimport styles from \"../css/base.css\";\nimport { DatePicker } from \"../index\";\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n      console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n      return <div {...props}/>\n    };\nconst Arrow = makeShortcode(\"Arrow\");\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"datepicker\"\n    }}>{`DatePicker`}</h1>\n    <h2 {...{\n      \"id\": \"datepicker-props\"\n    }}>{`DatePicker props`}</h2>\n    <Props of={DatePicker} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"basic-date-picker\"\n    }}>{`basic date picker`}</h3>\n    <Playground __position={1} __code={'{() => {\\n    const [value, setValue] = useState({ year: 2019, month: 11, day: 15 })\\n    const onChange = (year, month, day) => {\\n      if (!!year && !!month && !!day) {\\n        setValue({ year, month, day })\\n      }\\n    }\\n    // provide `day` value for  min, max properties in years object to limit selection by day!\\n    const years = {\\n      min: { year: 2018, month: 1, day: 25 },\\n      max: { year: 2020, month: 2, day: 4 },\\n    }\\n    return (\\n      <Fragment>\\n        <DatePicker\\n          years={years}\\n          value={value}\\n          lang={[\\n            \\'Jan\\',\\n            \\'Feb\\',\\n            \\'Mar\\',\\n            \\'Apr\\',\\n            \\'May\\',\\n            \\'Jun\\',\\n            \\'Jul\\',\\n            \\'Aug\\',\\n            \\'Sep\\',\\n            \\'Oct\\',\\n            \\'Nov\\',\\n            \\'Dec\\',\\n          ]}\\n          onChange={onChange}\\n        />\\n      \\n    )\\n  }}\\n</Playground>'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Fragment,\n      Playground,\n      Props,\n      styles,\n      DatePicker\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = useState({\n          year: 2019,\n          month: 11,\n          day: 15\n        });\n\n        const onChange = (year, month, day) => {\n          if (!!year && !!month && !!day) {\n            setValue({\n              year,\n              month,\n              day\n            });\n          }\n        }; // provide `day` value for  min, max properties in years object to limit selection by day!\n\n\n        const years = {\n          min: {\n            year: 2018,\n            month: 1,\n            day: 25\n          },\n          max: {\n            year: 2020,\n            month: 2,\n            day: 4\n          }\n        };\n        return <Fragment mdxType=\"Fragment\">\n  \t<DatePicker years={years} value={value} lang={[\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]} onChange={onChange} mdxType=\"DatePicker\" />\n  </Fragment>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"using-a-custom-picker\"\n    }}>{`using a custom picker`}</h3>\n    <p>{`You can specify a `}<strong parentName=\"p\">{`custom picker component`}</strong>{`. If you go for this approach, don't forget to manually set the `}<inlineCode parentName=\"p\">{`isOpen`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in order to effectively show your picker`}</p>\n    <Playground __position={2} __code={'{() => {\\n    const Arrow = ({ isOpen }) => {\\n      return (\\n        <div\\n          className={\\n            isOpen\\n              ? styles.exampledDatepickerArrowOpen\\n              : styles.exampledDatepickerArrow\\n          }\\n        />\\n      )\\n    }\\n\\n    const [value, setValue] = useState(null)\\n    // Manual control of  DatePicker\\'s show prop\\n    const [isOpen, setIsOpen] = useState(false)\\n    const onChange = (year, month, day) => {\\n      if (!!year && !!month && !!day) {\\n        setValue({ year, month, day })\\n      }\\n      setIsOpen(false)\\n    }\\n    const togglePicker = () => {\\n      setIsOpen(!isOpen)\\n    }\\n\\n    // specify min, max properties in years object to limit selection\\n    const years = {\\n      min: { year: 2018, month: 1 },\\n      max: { year: 2020, month: 2 },\\n    }\\n    return (\\n      <Fragment>\\n        <DatePicker\\n          years={years}\\n          value={value}\\n          show={isOpen}\\n          onChange={onChange}\\n        >\\n          {/* Custom picker component*/}\\n          <span\\n            className={styles.exampledDatepickerValueWrapper}\\n            onClick={togglePicker}\\n          >\\n            {value && `day ${value.day}, ${value.month} of ${value.year}`}\\n            {!value && \\'Customized Date Picker\\'}\\n            <Arrow isOpen={isOpen} />\\n          \\n          {/**/}\\n        </DatePicker>\\n      </Fragment>\\n    )\\n  }}\\n</Playground>'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Fragment,\n      Playground,\n      Props,\n      styles,\n      DatePicker\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  {() => {\n        const Arrow = ({\n          isOpen\n        }) => {\n          return <div className={isOpen ? styles.exampledDatepickerArrowOpen : styles.exampledDatepickerArrow} />;\n        };\n\n        const [value, setValue] = useState(null); // Manual control of  DatePicker's show prop\n\n        const [isOpen, setIsOpen] = useState(false);\n\n        const onChange = (year, month, day) => {\n          if (!!year && !!month && !!day) {\n            setValue({\n              year,\n              month,\n              day\n            });\n          }\n\n          setIsOpen(false);\n        };\n\n        const togglePicker = () => {\n          setIsOpen(!isOpen);\n        }; // specify min, max properties in years object to limit selection\n\n\n        const years = {\n          min: {\n            year: 2018,\n            month: 1\n          },\n          max: {\n            year: 2020,\n            month: 2\n          }\n        };\n        return <Fragment mdxType=\"Fragment\">\n  \t<DatePicker years={years} value={value} show={isOpen} onChange={onChange} mdxType=\"DatePicker\">\n      {\n              /* Custom picker component*/\n            }\n      <span className={styles.exampledDatepickerValueWrapper} onClick={togglePicker}>\n        {value && `day ${value.day}, ${value.month} of ${value.year}`}\n        {!value && \"Customized Date Picker\"}\n        <Arrow isOpen={isOpen} mdxType=\"Arrow\" />\n      </span>\n      {\n              /**/\n            }\n    </DatePicker>\n  </Fragment>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"month-picker\"\n    }}>{`month picker`}</h3>\n    <p>{`You can also display `}<strong parentName=\"p\">{`month options`}</strong>{` instead of the default `}<inlineCode parentName=\"p\">{`days`}</inlineCode>{` view.`}</p>\n    <p>{`Obs: the `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` function will not return the `}<inlineCode parentName=\"p\">{`day`}</inlineCode>{` value, obviously because it is not supposed to be shown. Instead, only `}<inlineCode parentName=\"p\">{`year`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`month`}</inlineCode>{` options are passed as parameters`}</p>\n    <Playground __position={3} __code={'{() => {\\n    const [value, setValue] = useState(null)\\n    const onChange = (year, month) => {\\n      if (!!year && !!month) {\\n        setValue({ year, month })\\n      }\\n    }\\n    // specify min, max properties in years object to limit selection\\n    const years = {\\n      min: { year: 2018, month: 1 },\\n      max: { year: 2020, month: 2 },\\n    }\\n    return (\\n      <Fragment>\\n        <DatePicker\\n          years={years}\\n          value={value}\\n          // enable isMonthsMode prop\\n          isMonthsMode={true}\\n          onChange={onChange}\\n        />\\n      \\n    )\\n  }}\\n</Playground>'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Fragment,\n      Playground,\n      Props,\n      styles,\n      DatePicker\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = useState(null);\n\n        const onChange = (year, month) => {\n          if (!!year && !!month) {\n            setValue({\n              year,\n              month\n            });\n          }\n        }; // specify min, max properties in years object to limit selection\n\n\n        const years = {\n          min: {\n            year: 2018,\n            month: 1\n          },\n          max: {\n            year: 2020,\n            month: 2\n          }\n        };\n        return <Fragment mdxType=\"Fragment\">\n        <DatePicker years={years} value={value} // enable isMonthsMode prop\n          isMonthsMode={true} onChange={onChange} mdxType=\"DatePicker\" />\n      </Fragment>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"month-picker-with-range-option\"\n    }}>{`month picker with range option`}</h3>\n    <p>{`To use the range option, just enable the `}<inlineCode parentName=\"p\">{`isRange`}</inlineCode>{` prop. In this case, `}<inlineCode parentName=\"p\">{`value`}</inlineCode>{` is treated as an array, where the first element is the initial range value, and the second is the last range value.`}</p>\n    <Playground __position={4} __code={'{() => {\\n    const initialValues = [\\n      { year: 2019, month: 3 },\\n      { year: 2020, month: 2 },\\n    ]\\n    const [values, setValues] = useState(initialValues)\\n    const onChange = (year, month, idx) => {\\n      if (!!year && !!month) {\\n        const newValues = values ? [...values] : []\\n        newValues[idx] = { year, month }\\n        setValues(newValues)\\n      }\\n    }\\n    // specify min, max properties in years object to limit selection\\n    return (\\n      <Fragment>\\n        <DatePicker\\n          value={values}\\n          isMonthsMode={true}\\n          // enable isRange prop\\n          isRange={true}\\n          onChange={onChange}\\n        />\\n      \\n    )\\n  }}\\n</Playground>'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Fragment,\n      Playground,\n      Props,\n      styles,\n      DatePicker\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  {() => {\n        const initialValues = [{\n          year: 2019,\n          month: 3\n        }, {\n          year: 2020,\n          month: 2\n        }];\n        const [values, setValues] = useState(initialValues);\n\n        const onChange = (year, month, idx) => {\n          if (!!year && !!month) {\n            const newValues = values ? [...values] : [];\n            newValues[idx] = {\n              year,\n              month\n            };\n            setValues(newValues);\n          }\n        }; // specify min, max properties in years object to limit selection\n\n\n        return <Fragment mdxType=\"Fragment\">\n        <DatePicker value={values} isMonthsMode={true} // enable isRange prop\n          isRange={true} onChange={onChange} mdxType=\"DatePicker\" />\n      </Fragment>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"date-picker-with-range-option\"\n    }}>{`date picker with range option`}</h3>\n    <Playground __position={5} __code={'{() => {\\n    const initialValues = null\\n    const [values, setValues] = useState(initialValues)\\n    const onChange = (year, month, day, idx) => {\\n      if (!!year && !!month && !!day) {\\n        const newValues = values ? [...values] : []\\n        newValues[idx] = { year, month, day }\\n        setValues(newValues)\\n      }\\n    }\\n    // specify min, max properties in years object to limit selection\\n    return (\\n      <Fragment>\\n        <DatePicker\\n          years={{\\n            min: { day: 1, month: 2, year: 2020 },\\n            max: { day: 1, month: 3, year: 2021 },\\n          }}\\n          value={values}\\n          // enable isRange prop\\n          isRange={true}\\n          onChange={onChange}\\n        />\\n      \\n    )\\n  }}\\n</Playground>'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Fragment,\n      Playground,\n      Props,\n      styles,\n      DatePicker\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  {() => {\n        const initialValues = null;\n        const [values, setValues] = useState(initialValues);\n\n        const onChange = (year, month, day, idx) => {\n          if (!!year && !!month && !!day) {\n            const newValues = values ? [...values] : [];\n            newValues[idx] = {\n              year,\n              month,\n              day\n            };\n            setValues(newValues);\n          }\n        }; // specify min, max properties in years object to limit selection\n\n\n        return <Fragment mdxType=\"Fragment\">\n        <DatePicker years={{\n            min: {\n              day: 1,\n              month: 2,\n              year: 2020\n            },\n            max: {\n              day: 1,\n              month: 3,\n              year: 2021\n            }\n          }} value={values} // enable isRange prop\n          isRange={true} onChange={onChange} mdxType=\"DatePicker\" />\n      </Fragment>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"years-as-array\"\n    }}>{`years as array`}</h3>\n    <Playground __position={6} __code={'{() => {\\n    const Arrow = ({ isOpen }) => {\\n      return (\\n        <div\\n          className={\\n            isOpen\\n              ? styles.exampledDatepickerArrowOpen\\n              : styles.exampledDatepickerArrow\\n          }\\n        />\\n      )\\n    }\\n\\n    const [value, setValue] = useState(null)\\n    const [isOpen, setIsOpen] = useState(false)\\n    const onChange = (year, month, day) => {\\n      if (!!year && !!month && !!day) {\\n        setValue({ year, month, day })\\n      }\\n      setIsOpen(false)\\n    }\\n    const togglePicker = () => {\\n      setIsOpen(!isOpen)\\n    }\\n\\n    return (\\n      <Fragment>\\n        <DatePicker\\n          years={[2015, 2017, 2019]}\\n          value={value}\\n          show={isOpen}\\n          onChange={onChange}\\n        >\\n          <span\\n            className={styles.exampledDatepickerValueWrapper}\\n            onClick={togglePicker}\\n          >\\n            {value && `${value.day}/${value.month}/${value.year}`}\\n            {!value && \\'Pick a date\\'}\\n            <Arrow isOpen={isOpen} />\\n          \\n        </DatePicker>\\n      </Fragment>\\n    )\\n  }}\\n</Playground>'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Fragment,\n      Playground,\n      Props,\n      styles,\n      DatePicker\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  {() => {\n        const Arrow = ({\n          isOpen\n        }) => {\n          return <div className={isOpen ? styles.exampledDatepickerArrowOpen : styles.exampledDatepickerArrow} />;\n        };\n\n        const [value, setValue] = useState(null);\n        const [isOpen, setIsOpen] = useState(false);\n\n        const onChange = (year, month, day) => {\n          if (!!year && !!month && !!day) {\n            setValue({\n              year,\n              month,\n              day\n            });\n          }\n\n          setIsOpen(false);\n        };\n\n        const togglePicker = () => {\n          setIsOpen(!isOpen);\n        };\n\n        return <Fragment mdxType=\"Fragment\">\n  \t<DatePicker years={[2015, 2017, 2019]} value={value} show={isOpen} onChange={onChange} mdxType=\"DatePicker\">\n      <span className={styles.exampledDatepickerValueWrapper} onClick={togglePicker}>\n        {value && `${value.day}/${value.month}/${value.year}`}\n        {!value && \"Pick a date\"}\n        <Arrow isOpen={isOpen} mdxType=\"Arrow\" />\n      </span>\n    </DatePicker>\n  </Fragment>;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}