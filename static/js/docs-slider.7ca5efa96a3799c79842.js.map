{"version":3,"sources":["/home/runner/work/pi-ui/pi-ui/src/docs/slider.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","of","Slider","__position","__code","__scope","this","useState","Fragment","Playground","Props","NumberInput","Checkbox","__codesandbox","handle1","handle2","coordinates","setCoordinates","min","setMin","max","setMax","disabled","setDisabled","double","axis","handles","value","onChange","label","id","checked","e","newLimit","parseInt","target","isMDXComponent"],"mappings":"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","file":"static/js/docs-slider.d29fbb4f.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { useState, Fragment } from \"react\";\nimport { Playground, Props } from \"docz\";\nimport { Slider, NumberInput, Checkbox } from \"../index\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"slider\"\n    }}>{`Slider`}</h1>\n    <h2 {...{\n      \"id\": \"slider-props\"\n    }}>{`Slider props`}</h2>\n    <Props of={Slider} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"single-horizontal-slider\"\n    }}>{`Single horizontal slider`}</h3>\n    <Playground __position={1} __code={'() => {\\n  const [coordinates, setCoordinates] = useState({ handle1: 0, handle2: 40 })\\n  const [min, setMin] = useState(0)\\n  const [max, setMax] = useState(100)\\n  const [disabled, setDisabled] = useState(false)\\n  return (\\n    <Fragment>\\n      <Slider\\n        double={false}\\n        disabled={disabled}\\n        axis={\\'x\\'}\\n        max={max}\\n        min={min}\\n        handles={[\\n          {\\n            value: coordinates.handle1,\\n            onChange: value =>\\n              setCoordinates(coordinates => ({\\n                ...coordinates,\\n                handle1: value,\\n              })),\\n          },\\n        ]}\\n      />\\n      <br />\\n      <br />\\n      <Checkbox\\n        label=\\\"Disabled\\\"\\n        id=\\\"single-horizontal-slider-disabled\\\"\\n        checked={disabled}\\n        onChange={() => setDisabled(!disabled)}\\n      />\\n      <NumberInput\\n        label=\\\"Minimum\\\"\\n        id=\\\"single-horizontal-slider-min\\\"\\n        value={min}\\n        onChange={e => {\\n          const newLimit = parseInt(e.target.value)\\n          if (newLimit < max) setMin(newLimit)\\n        }}\\n      />\\n      <br />\\n      <NumberInput\\n        label=\\\"Maximum\\\"\\n        id=\\\"single-horizontal-slider-max\\\"\\n        value={max}\\n        onChange={e => {\\n          const newLimit = parseInt(e.target.value)\\n          if (newLimit > min) setMax(newLimit)\\n        }}\\n      />\\n    </Fragment>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Fragment,\n      Playground,\n      Props,\n      Slider,\n      NumberInput,\n      Checkbox\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  {() => {\n        const [coordinates, setCoordinates] = useState({\n          handle1: 0,\n          handle2: 40\n        });\n        const [min, setMin] = useState(0);\n        const [max, setMax] = useState(100);\n        const [disabled, setDisabled] = useState(false);\n        return <Fragment mdxType=\"Fragment\">\n        <Slider double={false} disabled={disabled} axis={\"x\"} max={max} min={min} handles={[{\n            value: coordinates.handle1,\n            onChange: value => setCoordinates(coordinates => ({ ...coordinates,\n              handle1: value\n            }))\n          }]} mdxType=\"Slider\" />\n        <br />\n        <br />\n        <Checkbox label=\"Disabled\" id=\"single-horizontal-slider-disabled\" checked={disabled} onChange={() => setDisabled(!disabled)} mdxType=\"Checkbox\" />\n        <NumberInput label=\"Minimum\" id=\"single-horizontal-slider-min\" value={min} onChange={e => {\n            const newLimit = parseInt(e.target.value);\n            if (newLimit < max) setMin(newLimit);\n          }} mdxType=\"NumberInput\" />\n        <br />\n        <NumberInput label=\"Maximum\" id=\"single-horizontal-slider-max\" value={max} onChange={e => {\n            const newLimit = parseInt(e.target.value);\n            if (newLimit > min) setMax(newLimit);\n          }} mdxType=\"NumberInput\" />\n      </Fragment>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"single-vertical-slider\"\n    }}>{`Single vertical slider`}</h3>\n    <Playground __position={2} __code={'() => {\\n  const [coordinates, setCoordinates] = useState({ handle1: 0, handle2: 40 })\\n  const [min, setMin] = useState(0)\\n  const [max, setMax] = useState(100)\\n  const [disabled, setDisabled] = useState(false)\\n  return (\\n    <Fragment>\\n      <Slider\\n        double={false}\\n        disabled={disabled}\\n        axis={\\'y\\'}\\n        max={max}\\n        min={min}\\n        handles={[\\n          {\\n            value: coordinates.handle1,\\n            onChange: value =>\\n              setCoordinates(coordinates => ({\\n                ...coordinates,\\n                handle1: value,\\n              })),\\n          },\\n        ]}\\n      />\\n      <br />\\n      <br />\\n      <Checkbox\\n        label=\\\"Disabled\\\"\\n        id=\\\"single-vertical-slider-disabled\\\"\\n        checked={disabled}\\n        onChange={() => setDisabled(!disabled)}\\n      />\\n      <NumberInput\\n        label=\\\"Minimum\\\"\\n        id=\\\"single-vertical-slider-min\\\"\\n        value={min}\\n        onChange={e => {\\n          const newLimit = parseInt(e.target.value)\\n          if (newLimit < max) setMin(newLimit)\\n        }}\\n      />\\n      <br />\\n      <NumberInput\\n        label=\\\"Maximum\\\"\\n        id=\\\"single-vertical-slider-max\\\"\\n        value={max}\\n        onChange={e => {\\n          const newLimit = parseInt(e.target.value)\\n          if (newLimit > min) setMax(newLimit)\\n        }}\\n      />\\n    </Fragment>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Fragment,\n      Playground,\n      Props,\n      Slider,\n      NumberInput,\n      Checkbox\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  {() => {\n        const [coordinates, setCoordinates] = useState({\n          handle1: 0,\n          handle2: 40\n        });\n        const [min, setMin] = useState(0);\n        const [max, setMax] = useState(100);\n        const [disabled, setDisabled] = useState(false);\n        return <Fragment mdxType=\"Fragment\">\n        <Slider double={false} disabled={disabled} axis={\"y\"} max={max} min={min} handles={[{\n            value: coordinates.handle1,\n            onChange: value => setCoordinates(coordinates => ({ ...coordinates,\n              handle1: value\n            }))\n          }]} mdxType=\"Slider\" />\n        <br />\n        <br />\n        <Checkbox label=\"Disabled\" id=\"single-vertical-slider-disabled\" checked={disabled} onChange={() => setDisabled(!disabled)} mdxType=\"Checkbox\" />\n        <NumberInput label=\"Minimum\" id=\"single-vertical-slider-min\" value={min} onChange={e => {\n            const newLimit = parseInt(e.target.value);\n            if (newLimit < max) setMin(newLimit);\n          }} mdxType=\"NumberInput\" />\n        <br />\n        <NumberInput label=\"Maximum\" id=\"single-vertical-slider-max\" value={max} onChange={e => {\n            const newLimit = parseInt(e.target.value);\n            if (newLimit > min) setMax(newLimit);\n          }} mdxType=\"NumberInput\" />\n      </Fragment>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"double-horizontal-slider\"\n    }}>{`Double horizontal slider`}</h3>\n    <Playground __position={3} __code={'() => {\\n  const [coordinates, setCoordinates] = useState({ handle1: 0, handle2: 40 })\\n  const [min, setMin] = useState(0)\\n  const [max, setMax] = useState(100)\\n  const [disabled, setDisabled] = useState(false)\\n  return (\\n    <Fragment>\\n      <Slider\\n        double={true}\\n        disabled={disabled}\\n        axis={\\'x\\'}\\n        max={max}\\n        min={min}\\n        handles={[\\n          {\\n            value: coordinates.handle1,\\n            onChange: value =>\\n              setCoordinates(coordinates => ({\\n                ...coordinates,\\n                handle1: value,\\n              })),\\n          },\\n          {\\n            value: coordinates.handle2,\\n            onChange: value =>\\n              setCoordinates(coordinates => ({\\n                ...coordinates,\\n                handle2: value,\\n              })),\\n          },\\n        ]}\\n      />\\n      <br />\\n      <br />\\n      <Checkbox\\n        label=\\\"Disabled\\\"\\n        id=\\\"double-horizontal-slider-disabled\\\"\\n        checked={disabled}\\n        onChange={() => setDisabled(!disabled)}\\n      />\\n      <NumberInput\\n        label=\\\"Minimum\\\"\\n        id=\\\"double-horizontal-slider-min\\\"\\n        value={min}\\n        onChange={e => {\\n          const newLimit = parseInt(e.target.value)\\n          if (newLimit < max) setMin(newLimit)\\n        }}\\n      />\\n      <br />\\n      <NumberInput\\n        label=\\\"Maximum\\\"\\n        id=\\\"double-horizontal-slider-max\\\"\\n        value={max}\\n        onChange={e => {\\n          const newLimit = parseInt(e.target.value)\\n          if (newLimit > min) setMax(newLimit)\\n        }}\\n      />\\n    </Fragment>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Fragment,\n      Playground,\n      Props,\n      Slider,\n      NumberInput,\n      Checkbox\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  {() => {\n        const [coordinates, setCoordinates] = useState({\n          handle1: 0,\n          handle2: 40\n        });\n        const [min, setMin] = useState(0);\n        const [max, setMax] = useState(100);\n        const [disabled, setDisabled] = useState(false);\n        return <Fragment mdxType=\"Fragment\">\n        <Slider double={true} disabled={disabled} axis={\"x\"} max={max} min={min} handles={[{\n            value: coordinates.handle1,\n            onChange: value => setCoordinates(coordinates => ({ ...coordinates,\n              handle1: value\n            }))\n          }, {\n            value: coordinates.handle2,\n            onChange: value => setCoordinates(coordinates => ({ ...coordinates,\n              handle2: value\n            }))\n          }]} mdxType=\"Slider\" />\n        <br />\n        <br />\n        <Checkbox label=\"Disabled\" id=\"double-horizontal-slider-disabled\" checked={disabled} onChange={() => setDisabled(!disabled)} mdxType=\"Checkbox\" />\n        <NumberInput label=\"Minimum\" id=\"double-horizontal-slider-min\" value={min} onChange={e => {\n            const newLimit = parseInt(e.target.value);\n            if (newLimit < max) setMin(newLimit);\n          }} mdxType=\"NumberInput\" />\n        <br />\n        <NumberInput label=\"Maximum\" id=\"double-horizontal-slider-max\" value={max} onChange={e => {\n            const newLimit = parseInt(e.target.value);\n            if (newLimit > min) setMax(newLimit);\n          }} mdxType=\"NumberInput\" />\n      </Fragment>;\n      }}\n    </Playground>\n    <h3 {...{\n      \"id\": \"double-vertical-slider\"\n    }}>{`Double vertical slider`}</h3>\n    <Playground __position={4} __code={'() => {\\n  const [coordinates, setCoordinates] = useState({ handle1: 0, handle2: 40 })\\n  const [min, setMin] = useState(0)\\n  const [max, setMax] = useState(100)\\n  const [disabled, setDisabled] = useState(false)\\n  return (\\n    <Fragment>\\n      <Slider\\n        double={true}\\n        disabled={disabled}\\n        axis={\\'y\\'}\\n        max={max}\\n        min={min}\\n        handles={[\\n          {\\n            value: coordinates.handle1,\\n            onChange: value =>\\n              setCoordinates(coordinates => ({\\n                ...coordinates,\\n                handle1: value,\\n              })),\\n          },\\n          {\\n            value: coordinates.handle2,\\n            onChange: value =>\\n              setCoordinates(coordinates => ({\\n                ...coordinates,\\n                handle2: value,\\n              })),\\n          },\\n        ]}\\n      />\\n      <br />\\n      <br />\\n      <Checkbox\\n        label=\\\"Disabled\\\"\\n        id=\\\"double-vertical-slider-disabled\\\"\\n        checked={disabled}\\n        onChange={() => setDisabled(!disabled)}\\n      />\\n      <NumberInput\\n        label=\\\"Minimum\\\"\\n        id=\\\"double-vertical-slider-min\\\"\\n        value={min}\\n        onChange={e => {\\n          const newLimit = parseInt(e.target.value)\\n          if (newLimit < max) setMin(newLimit)\\n        }}\\n      />\\n      <br />\\n      <NumberInput\\n        label=\\\"Maximum\\\"\\n        id=\\\"double-vertical-slider-max\\\"\\n        value={max}\\n        onChange={e => {\\n          const newLimit = parseInt(e.target.value)\\n          if (newLimit > min) setMax(newLimit)\\n        }}\\n      />\\n    </Fragment>\\n  )\\n}'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Fragment,\n      Playground,\n      Props,\n      Slider,\n      NumberInput,\n      Checkbox\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  {() => {\n        const [coordinates, setCoordinates] = useState({\n          handle1: 0,\n          handle2: 40\n        });\n        const [min, setMin] = useState(0);\n        const [max, setMax] = useState(100);\n        const [disabled, setDisabled] = useState(false);\n        return <Fragment mdxType=\"Fragment\">\n        <Slider double={true} disabled={disabled} axis={\"y\"} max={max} min={min} handles={[{\n            value: coordinates.handle1,\n            onChange: value => setCoordinates(coordinates => ({ ...coordinates,\n              handle1: value\n            }))\n          }, {\n            value: coordinates.handle2,\n            onChange: value => setCoordinates(coordinates => ({ ...coordinates,\n              handle2: value\n            }))\n          }]} mdxType=\"Slider\" />\n        <br />\n        <br />\n        <Checkbox label=\"Disabled\" id=\"double-vertical-slider-disabled\" checked={disabled} onChange={() => setDisabled(!disabled)} mdxType=\"Checkbox\" />\n        <NumberInput label=\"Minimum\" id=\"double-vertical-slider-min\" value={min} onChange={e => {\n            const newLimit = parseInt(e.target.value);\n            if (newLimit < max) setMin(newLimit);\n          }} mdxType=\"NumberInput\" />\n        <br />\n        <NumberInput label=\"Maximum\" id=\"double-vertical-slider-max\" value={max} onChange={e => {\n            const newLimit = parseInt(e.target.value);\n            if (newLimit > min) setMax(newLimit);\n          }} mdxType=\"NumberInput\" />\n      </Fragment>;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}