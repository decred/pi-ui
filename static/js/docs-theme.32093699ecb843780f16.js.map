{"version":3,"sources":["/home/runner/work/pi-ui/pi-ui/src/docs/theme.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"sWASMA,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,WADR,WAGA,iBAAQ,CACN,GAAM,yBADR,yBAGA,+FAA8E,0BAAYC,WAAW,KAAvB,YAA9E,gEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4GASL,iBAAQ,CACN,GAAM,sCADR,sCAGA,wCAAuB,0BAAYA,WAAW,KAAvB,iBAAvB,mBAAoG,0BAAYA,WAAW,KAAvB,UAApG,YAAmK,0BAAYA,WAAW,KAAvB,oBAAnK,kBAAkP,0BAAYA,WAAW,KAAvB,SAAlP,WACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,i+CAgDL,iBAAQ,CACN,GAAM,iBADR,iBAGA,sDAAqC,0BAAYA,WAAW,KAAvB,qBAArC,QAA2G,0BAAYA,WAAW,KAAvB,oBAA3G,wCACA,gDAA+B,0BAAYA,WAAW,KAAvB,4BAA/B,QAA4G,0BAAYA,WAAW,KAAvB,2BAA5G,kIAEA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sHAIL,iBAAQ,CACN,GAAM,kCADR,kCAGA,qBAAG,0BAAYA,WAAW,KAAvB,YAAH,6BAAqF,0BAAYA,WAAW,KAAvB,SAArF,KAA4I,0BAAYA,WAAW,KAAvB,aAA5I,KAAuM,0BAAYA,WAAW,KAAvB,gBAAvM,wCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0mB,wKA2BTJ,EAAWK,gBAAiB","file":"static/js/docs-theme.970a80ca.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h1>\n    <h2 {...{\n      \"id\": \"create-a-custom-theme\"\n    }}>{`Create a custom theme`}</h2>\n    <p>{`The recommended way to create a custom theme is to create a file named `}<inlineCode parentName=\"p\">{`theme.js`}</inlineCode>{`, you can add your custom values and override existing ones.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// theme.js\n\nexport default {\n  \"color-primary\": \"red\",\n  \"btn-color\": \"var(--color-primary)\"\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-your-theme-in-your-application\"\n    }}>{`Use your theme in your application`}</h2>\n    <p>{`Pi-ui exposes a `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{` that accepts a `}<inlineCode parentName=\"p\">{`themes`}</inlineCode>{` object, `}<inlineCode parentName=\"p\">{`defaultThemeName`}</inlineCode>{` as string and `}<inlineCode parentName=\"p\">{`fonts`}</inlineCode>{` array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from \"react\";\nimport { render } from \"react-dom\";\nimport { ThemeProvider, defaultLightTheme, DEFAULT_LIGHT_THEME_NAME } from \"pi-ui\";\n\nimport customTheme from \"./theme\";\nimport SourceSansProLight from \"../assets/fonts/source-sans-pro/SourceSansPro-Light.ttf\";\nimport SourceSansProRegular from \"../assets/fonts/source-sans-pro/SourceSansPro-Regular.ttf\";\nimport SourceSansProSemiBold from \"../assets/fonts/source-sans-pro/SourceSansPro-SemiBold.ttf\";\n\nconst fonts = [\n  {\n    \"font-family\": \"Source Sans Pro\",\n    src: \\`url(\\${SourceSansProLight}) format(\"truetype\")\\`,\n    \"font-weight\": defaultLightTheme[\"font-weight-light\"], // 300\n    \"font-style\": \"normal\",\n    \"font-display\": \"swap\"\n  },\n  {\n    \"font-family\": \"Source Sans Pro\",\n    src: \\`url(\\${SourceSansProRegular}) format(\"truetype\")\\`,\n    \"font-weight\": defaultLightTheme[\"font-weight-regular\"], // 400\n    \"font-style\": \"normal\",\n    \"font-display\": \"swap\"\n  },\n  {\n    \"font-family\": \"Source Sans Pro\",\n    src: \\`url(\\${SourceSansProSemiBold}) format(\"truetype\")\\`,\n    \"font-weight\": defaultLightTheme[\"font-weight-semi-bold\"], // 600\n    \"font-style\": \"normal\",\n    \"font-display\": \"swap\"\n  }\n];\n\nconst App = () => {\n  return (\n    <ThemeProvider\n      themes={{ [DEFAULT_LIGHT_THEME_NAME]: defaultLightTheme, customTheme }}\n      defaultThemeName=\"customTheme\"\n      fonts={fonts}>\n      {children}\n    </ThemeProvider>\n  );\n};\n\nrender(<App />, document.getElementById(\"root\"));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"default-theme\"\n    }}>{`Default theme`}</h2>\n    <p>{`There are two default themes, `}<inlineCode parentName=\"p\">{`defaultLightTheme`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`defaultDarkTheme`}</inlineCode>{`. They are both exported from pi-ui.`}</p>\n    <p>{`It's recommended to use `}<inlineCode parentName=\"p\">{`DEFAULT_LIGHT_THEME_NAME`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`DEFAULT_DARK_THEME_NAME`}</inlineCode>{` default theme names, as they are used\ninternally in some components to use dark default styling variables or the light ones.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { defaultLightTheme, defaultDarkTheme, DEFAULT_LIGHT_THEME_NAME, DEFAULT_DARK_THEME_NAME } from \"pi-ui\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usetheme-hook-in-deep-children\"\n    }}>{`UseTheme hook in deep children`}</h2>\n    <p><inlineCode parentName=\"p\">{`useTheme`}</inlineCode>{` exposes three properties `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`themeName`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`setThemeName`}</inlineCode>{` which can be used in deep children.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from \"react\";\nimport { useTheme, Button, getThemeProperty, DEFAULT_LIGHT_THEME_NAME, DEFAULT_DARK_THEME_NAME } from \"pi-ui\";\n\nconst DeepChild = () => {\n  const { themeName, setThemeName, theme } = useTheme();\n\n  const colorGreen = getThemeProperty(theme, \"color-green\"); // get theme property \n  \n  const handleToggleTheme = () => {\n    if (themeName === DEFAULT_LIGHT_THEME_NAME) {\n      setThemeName(DEFAULT_LIGHT_THEME_NAME);\n    } else {\n      setThemeName(DEFAULT_LIGHT_THEME_NAME);\n    }\n  }\n\n  return (\n    <Button onClick={handleToggleTheme}>Toggle theme</Button>\n  )\n};\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}