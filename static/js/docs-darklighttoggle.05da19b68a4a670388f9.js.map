{"version":3,"sources":["/home/runner/work/pi-ui/pi-ui/src/docs/darklighttoggle.mdx"],"names":["layoutProps","MDXContent","components","props","mdxType","of","DarkLightToggle","__position","__code","__scope","this","useState","Fragment","Playground","Props","styles","__codesandbox","label","setLabel","toggled","setToggled","className","toggleWrapperExample","onToggle","toggleLabelExample","isMDXComponent"],"mappings":"4kBAYMA,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,kBACE,GAAM,0BADR,0BAGA,kBACE,GAAM,cADR,cAGA,YAAC,IAAD,CAAOC,GAAIC,IAAiBF,QAAQ,UACpC,kBACE,GAAM,SADR,SAGA,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,2pBAAgqBC,QAAS,CAC1sBN,MAAOO,KAAOA,KAAKP,MAAQA,EAC3BQ,oBACAC,oBACAC,eACAC,UACAR,oBACAS,YACCC,cAAa,YAAeZ,QAAQ,eACxC,WACK,IACA,EAA0BO,mBADL,cACrB,mBAAOM,EAAP,KAAcC,EAAd,KACA,EAA8BP,oBAAS,GAAvC,mBAAOQ,EAAP,KAAgBC,EAAhB,KAYA,OAAO,YAAC,WAAD,CAAUhB,QAAQ,YAC3B,mBAAKiB,UAAWN,IAAOO,sBACrB,YAAC,IAAD,CAAiBC,SAZO,WAJH,eAKfN,GACFC,EAAS,aACTE,GAAW,KAEXF,EATiB,cAUjBE,GAAW,KAM6BD,QAASA,EAASf,QAAQ,oBACtE,mBAAKiB,UAAWN,IAAOS,oBAAqBP,S,kLASpDhB,EAAWwB,gBAAiB","file":"static/js/docs-darklighttoggle.2479618f.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { useState, Fragment } from \"react\";\nimport { Playground, Props } from \"docz\";\nimport { DarkLightToggle } from \"../index\";\nimport styles from \"../css/base.css\";\n\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"darklighttoggle-switch\"\n    }}>{`DarkLightToggle Switch`}</h1>\n    <h2 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h2>\n    <Props of={DarkLightToggle} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <Playground __position={1} __code={'{() => {\\n    const initialLabel = \\\"I\\'m light!\\\"\\n    const [label, setLabel] = useState(initialLabel)\\n    const [toggled, setToggled] = useState(false)\\n    const onToggleHandler = () => {\\n      if (label === initialLabel) {\\n        setLabel(\\\"I\\'m dark!\\\")\\n        setToggled(true)\\n      } else {\\n        setLabel(initialLabel)\\n        setToggled(false)\\n      }\\n    }\\n    return (\\n      <Fragment>\\n        <div className={styles.toggleWrapperExample}>\\n          <DarkLightToggle onToggle={onToggleHandler} toggled={toggled} />\\n          <div className={styles.toggleLabelExample}>{label}\\n        </div>\\n      </Fragment>\\n    )\\n  }}\\n</Playground>'} __scope={{\n      props: this ? this.props : props,\n      useState,\n      Fragment,\n      Playground,\n      Props,\n      DarkLightToggle,\n      styles\n    }} __codesandbox={`undefined`} mdxType=\"Playground\">\n  {() => {\n        const initialLabel = \"I'm light!\";\n        const [label, setLabel] = useState(initialLabel);\n        const [toggled, setToggled] = useState(false);\n\n        const onToggleHandler = () => {\n          if (label === initialLabel) {\n            setLabel(\"I'm dark!\");\n            setToggled(true);\n          } else {\n            setLabel(initialLabel);\n            setToggled(false);\n          }\n        };\n\n        return <Fragment mdxType=\"Fragment\">\n      <div className={styles.toggleWrapperExample}>\n        <DarkLightToggle onToggle={onToggleHandler} toggled={toggled} mdxType=\"DarkLightToggle\" />\n        <div className={styles.toggleLabelExample}>{label}</div>\n      </div>\n    </Fragment>;\n      }}\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}